<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
   Copyright (C) 2016 Red Hat, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.syndesis.extension</groupId>
    <artifactId>extension-parent</artifactId>
    <version>2.0.0-20200312</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>extension-maven-plugin</artifactId>
  <name>Extension :: Maven Plugin</name>
  <packaging>maven-plugin</packaging>

  <properties>
    <!-- repackage integration test is disabled due to the extremely long time it takes to execute, to run all tests run Maven with
      `-Dinvoker.test=*`, or run the repackage test only with `-Dinvoker.test=repackage`, we define it here so we can extend it
      below, also if we define `<invokerTest>` below it's always of higher priority than `-Dinvoker.test` (odd)
    -->
    <invoker.test>*,!repackage</invoker.test>
  </properties>

  <dependencies>

    <dependency>
      <groupId>io.syndesis.common</groupId>
      <artifactId>common-model</artifactId>
    </dependency>

    <dependency>
      <groupId>io.syndesis.common</groupId>
      <artifactId>common-util</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven.plugin-tools</groupId>
      <artifactId>maven-plugin-annotations</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven.resolver</groupId>
      <artifactId>maven-resolver-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven.resolver</groupId>
      <artifactId>maven-resolver-util</artifactId>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-maven-plugin</artifactId>
      <version>${spring-boot.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>io.syndesis.extension</groupId>
      <artifactId>extension-converter</artifactId>
    </dependency>

    <dependency>
      <groupId>io.atlasmap</groupId>
      <artifactId>atlas-java-model</artifactId>
    </dependency>

    <dependency>
      <groupId>io.atlasmap</groupId>
      <artifactId>atlas-model</artifactId>
    </dependency>

    <dependency>
      <groupId>io.atlasmap</groupId>
      <artifactId>atlas-core</artifactId>
    </dependency>

    <dependency>
      <groupId>io.atlasmap</groupId>
      <artifactId>atlas-java-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.hibernate.validator</groupId>
      <artifactId>hibernate-validator</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-annotations</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-loader-tools</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-shared-utils</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-common-artifact-filters</artifactId>
    </dependency>

    <dependency>
      <groupId>jakarta.validation</groupId>
      <artifactId>jakarta.validation-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <configuration>
          <delimiters>
            <!-- This makes sure that the files in src/it are not
                 filtered so that the placeholders remain unchanged -->
            <delimiter>${*}</delimiter>
          </delimiters>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-plugin-plugin</artifactId>
        <configuration>
          <mojoDependencies />
        </configuration>
        <executions>
          <execution>
            <id>default-descriptor</id>
            <phase>process-classes</phase>
            <goals>
              <goal>descriptor</goal>
            </goals>
          </execution>
          <execution>
            <id>help-goal</id>
            <goals>
              <goal>helpmojo</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-invoker-plugin</artifactId>
        <configuration>
          <!-- This is strongly discouraged in the invoker-plugin documentation, we need it though as the default repository
            (value of localRepositoryPath by default) used is pointing to the target directory, that would make us start on a clean repository
            on CI and since we download the whole Internet via Spring Boot and Camel BOMs would take too long -->
          <localRepositoryPath>${maven.repo.local}</localRepositoryPath>
          <!-- invoker plugin considers files, such as settings.xml as Maven projects -->
          <invokerTest>${invoker.test},!settings.xml</invokerTest>
        </configuration>
        <dependencies>
          <!-- The integration tests use this dependencies, we need to declare it so that Maven is aware of it -->
          <dependency>
            <groupId>io.syndesis.extension</groupId>
            <artifactId>extension-annotation-processor</artifactId>
            <version>${syndesis.version}</version>
          </dependency>
          <dependency>
            <groupId>io.syndesis.extension</groupId>
            <artifactId>extension-api</artifactId>
            <version>${syndesis.version}</version>
          </dependency>
        </dependencies>
      </plugin>

    </plugins>
  </build>

</project>
